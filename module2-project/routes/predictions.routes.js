const express = require('express');
const router = express.Router();
const axios = require('axios')
const Prediction = require('../models/Prediction.model')

let API_KEY =""

const isLoggedIn = require("../middleware/isLoggedIn")
const isLoggedOut = require("../middleware/isLoggedOut");
const User = require('../models/User.model');


//Axios Call to create a User to be able to use the API services
let createUserConfig = {
    method: 'post',
    url: 'http://api.cup2022.ir/api/v1/user',
    headers: 
        "Content-Type: application/json"
        ,
    data: { //replace Date here by your personal information
        "name" : `${process.env.API_NAME}`,
        "email": `${process.env.API_EMAIL}`,
        "password": `${process.env.API_PASS}`,
        "passwordConfirm" : `${process.env.API_PASS}`
    }
};

//To Log In with Email and Password on the API => response will give back a Token to access all the APIs services, this token is autogenerated every time you login
let loginUserConfig = {
    method: 'post',
    url: 'http://api.cup2022.ir/api/v1/user/login',
    headers: "Content-Type: application/json",
    data: { //replace Date here by your personal information
        "email": `${process.env.API_EMAIL}`,
        "password": `${process.env.API_PASS}`
    }
};

//To send a GET request to API using the token from login
let tokenAcessGETConfig = {
    method:'get',
    headers: `Authorization : Bearer ${API_KEY}`
}


router.post('/predictions/:id',isLoggedIn, (req,res)=>{
   let predictionId = req.params.id;
   let userId = req.session.currentUser._id
   const { awayScore, homeScore } = req.body
    Prediction.findByIdAndUpdate(predictionId, {awayScore, homeScore}, {new: true})
    .then (predictionInfo=>{
        res.redirect(`/profile/${userId}/predictions`)
    })
})

router.post('/predictions/:id/delete',isLoggedIn, (req,res)=>{
    let predictionId = req.params.id;
    let userId = req.session.currentUser._id
    Prediction.findByIdAndDelete(predictionId)
    .then(data=>{
        console.log("prediciton deleted")
        User.findById(userId)
        .then(userInfo=>{
            userInfo.predictionsCount -= 1;
            userInfo.save()
            res.redirect(`/profile/${userId}/predictions`)
        })
    })
})


router.post('/predictions/:id/verify', isLoggedIn, async (req,res)=>{
    let predictionId = req.params.id
    let userInfo = req.session.currentUser

    await axios(loginUserConfig)
    .then (data=>{
        API_KEY = data.data.data.token
        return API_KEY 
})
    await axios(`http://api.cup2022.ir/api/v1/match/${predictionId}`,  {
        method:'get',
        headers: `Authorization : Bearer ${API_KEY}`
    })
    .then( matchData =>{
        let matchInfo = matchData.data
        console.log(matchInfo)
        console.log("success")
        res.redirect(`/profile/${userInfo.username}`)    
    })
    console.log("verified")
    console.log(matchesArray)
})

let matchesArray = []
router.get('/profile/:id/dashboard/predictions', isLoggedIn, async (req,res)=>{
    if (API_KEY === ""){
        await axios(loginUserConfig)
        .then (data=>{
            API_KEY = data.data.data.token
            return API_KEY 
            //console.log(API_KEY)
    })
    }
        if(matchesArray.length<=0){
        await axios("http://api.cup2022.ir/api/v1/match",  {
            method:'get',
            headers: `Authorization : Bearer ${API_KEY}`
        })
            .then(matchesData=> {
                matchesArray = matchesData.data.data
                return matchesArray
            })
        }
    let userData = req.session.currentUser
    User.findById(userData._id)
    .populate('predictions')
    .then(userInfo=>{
        let latestPredictions = userInfo.predictions.reverse()
        for (i=0;i<5;i++){
            let date = latestPredictions[i].updatedAt
            let splicedDate = date.toDateString()
            let splicedTime = date.toTimeString()
            let splicedTimeReadable = splicedTime.slice(0,8)

            let data = latestPredictions[i].matchId
            let mappedMatch = matchesArray.filter(matchToFilter=>matchToFilter.id === `${data}`)
                latestPredictions[i].homeFlag = mappedMatch[0].home_flag
                latestPredictions[i].awayFlag= mappedMatch[0].away_flag
                latestPredictions[i].awayTeam= mappedMatch[0].away_team_en
                latestPredictions[i].homeTeam= mappedMatch[0].home_team_en
                latestPredictions[i].date= splicedDate
                latestPredictions[i].time= splicedTimeReadable

                
        }
        userData = userInfo
        res.render('profile/prediction-dashboard', {userData, latestPredictions})
    })
    
})


module.exports = router;

















